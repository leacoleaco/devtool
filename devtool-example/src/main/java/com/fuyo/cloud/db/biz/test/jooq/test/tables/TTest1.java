/*
 * This file is generated by jOOQ.
 */
package com.fuyo.cloud.db.biz.test.jooq.test.tables;


import com.fuyo.cloud.db.biz.test.jooq.test.Keys;
import com.fuyo.cloud.db.biz.test.jooq.test.Test;
import com.fuyo.cloud.db.biz.test.jooq.test.tables.records.TTest1Record;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.BiFunction;
import java.util.regex.Pattern;
import java.util.stream.Stream;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SortField;
import org.jooq.SortOrder;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TTest1 extends TableImpl<TTest1Record> {

    private static final long serialVersionUID = 816842707;

    /**
     * The reference instance of <code>test.t_test1</code>
     */
    public static final TTest1 T_TEST1 = new TTest1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TTest1Record> getRecordType() {
        return TTest1Record.class;
    }

    /**
     * 通过字符串解析列属性
     */
    public Field parse(String property) {
        if (property == null) {
            throw new IllegalArgumentException("property can not be  null");
        }
        String _p = property.replaceAll("_", "").toLowerCase();
        switch (_p) {
            case "id":
                return this.ID;
            case "name":
                return this.NAME;
            case "datetime":
                return this.DATE_TIME;
            case "type":
                return this.TYPE;
            default: break;
        }
        throw new IllegalArgumentException("can not found property" + property);
    }
    protected enum Opera {
        AND("a", (a, b) -> a.and(b)),
        OR("o", (a, b) -> a.or(b)),
        ;

        private final String code;
        private final BiFunction<Condition, Condition, Condition> action;

        Opera(String code, BiFunction<Condition, Condition, Condition> action) {
            this.code = code;
            this.action = action;
        }

        protected final Condition operate(Condition a, Condition b) {
            if (a == null) {
                return b;
            } else if (b == null) {
                return a;
            }
            return action.apply(a, b);
        }

        protected static Opera parse(String code) {
            if (code == null) {
                throw new IllegalArgumentException("opera code error");
            }
            String _code = code.toLowerCase();
            for (Opera value : values()) {
                if (value.code.equals(_code)) {
                    return value;
                }
            }
            throw new IllegalArgumentException("opera code error,can not found operate:" + code);
        }
    }

    /**
     * 从url参数中构建条件
     */
    public Condition buildCondition(Map<String, Object> params){
        if (params == null || params.isEmpty()) {
            return DSL.trueCondition();
        }
        SQLFilter.filter(params);
        java.util.Iterator entries = params.entrySet().iterator();
        Condition condition = null;
        while (entries.hasNext()) {
            Map.Entry entry = (Map.Entry) entries.next();
            String expression = entry.getKey().toString();
            String value = entry.getValue().toString();
            if (Pattern.matches("w[a-z]{3}_[a-zA-Z$_]+", expression)) {
                condition = solveCondition(condition, expression, value);
            }
        }
        return condition;
    }

    protected Condition solveCondition(Condition condition, String expression, String value) {
        if (expression == null || "".equals(expression)) {
            return condition;
        }
        String logicExp = expression.substring(1, 2);
        Opera opera = Opera.parse(logicExp);
        String compPrefix = expression.substring(2, 4);
        String propName = SQLFilter.escape(expression.substring(5));
        Field field = parse(propName);
        switch (compPrefix) {
            case "eq":
                if (value != null) {
                    return opera.operate(condition, field.eq(value));
                } else {
                    return condition;
                }
            case "ne":
                if (value != null) {
                    return opera.operate(condition, field.ne(value));
                } else {
                    return condition;
                }
            case "gt":
                if (value != null) {
                    return opera.operate(condition, field.gt(value));
                } else {
                    return condition;
                }
            case "ge":
                if (value != null) {
                    return opera.operate(condition, field.ge(value));
                } else {
                    return condition;
                }
            case "lt":
                if (value != null) {
                    return opera.operate(condition, field.lt(value));
                } else {
                    return condition;
                }
            case "le":
                if (value != null) {
                    return opera.operate(condition, field.le(value));
                } else {
                    return condition;
                }
            case "lk":
                if (value != null && !"".equals(value)) {
                    return opera.operate(condition, field.like("%" + value + "%"));
                } else {
                    return condition;
                }
            case "in":
                if (value instanceof String) {
                    String v = (String) value;
                    if (v != null && !"".equals(v)) {
                        String[] split = v.split(",");
                        if (split != null && split.length > 0) {
                            java.util.ArrayList<String> strings = new java.util.ArrayList<>();
                            for (String s : split) {
                                strings.add(s);
                            }
                            return opera.operate(condition, field.in(strings));
                        }
                    }
                }
                return condition;
            case "ep":
                return opera.operate(condition, field.eq(""));
            case "np":
                return opera.operate(condition, field.ne(""));
            case "eu":
                return opera.operate(condition, field.isNull());
            case "nu":
                return opera.operate(condition, field.isNotNull());
            default:
                break;
        }
        throw new IllegalArgumentException("expression compare word error");
    }
    private static int compareValue(Object a, Object b) {
        if (a == null) {
            return -1;
        } else if (b == null) {
            return 1;
        } else {
            int _a;
            try {
                _a = Integer.parseInt(a.toString());
            } catch (Exception e) {
                return -1;
            }
            int _b;
            try {
                _b = Integer.parseInt(b.toString());
            } catch (Exception e) {
                return 1;
            }
            return Integer.compare(_a, _b);
        }
    }

    /**
     * 从url参数中构建排序
     */
     public SortField[] buildOrderBy(Map<String, Object> params, SortField... otherField) {
        return Stream.concat(
                Optional.ofNullable(otherField)
                        .map(Arrays::stream)
                        .orElse(Stream.empty())
                        .filter(Objects::nonNull),
                Arrays.stream(buildOrderBy(params))
        ).toArray(SortField[]::new);
    }

    /**
     * 从url参数中构建排序
     */
    public SortField[] buildOrderBy(Map<String, Object> params) {

            if (params == null || params.isEmpty()) {
            return new SortField[0];
        }
        SQLFilter.filter(params);
        return params.entrySet().stream()
                .filter(x -> Pattern.matches("o(a|d)_[$_a-zA-Z]+", x.getKey()))
                .sorted((x, y) -> compareValue(x.getValue(), y.getValue()))
                .map(entry -> {
                    String expression = entry.getKey();
                    String value = entry.getValue().toString();
                    String orderPrefix = expression.substring(1, 2);
                    String propName = SQLFilter.escape(expression.substring(3));
                    Field field = parse(propName);
                    switch (orderPrefix) {
                        case "a":
                            return field.sort(SortOrder.ASC);
                        case "d":
                            return field.sort(SortOrder.DESC);
                        default:
                            throw new AssertionError();
                    }
                })
                .filter(Objects::nonNull)
                .toArray(SortField[]::new);
    }
    static class SQLFilter {
        public static final String ESCAPE_START_STR = "$";
        public static final String ESCAPE_END_STR = "_";
        public static final java.util.Map<String, String> KEYWORDS;

        static {
            KEYWORDS = new java.util.HashMap<String, String>() {{
                put("mastor", "master");
                put("clr", "truncate");
                put("ins", "insert");
                put("sel", "select");
                put("del", "delete");
                put("upt", "update");
                put("def", "declare");
                put("alt", "alert");
                put("dpt", "drop");
            }};
        }

        protected static String filterSqlInject(String str) {
            if (isBlank(str)) {
                return null;
            }
            //去掉'|"|;|\字符
            str = str.replace("'", "");
            str = str.replace("\"", "");
            str = str.replace(";", "");
            str = str.replace("\\", "");
            //转换成小写
            str = str.toLowerCase();
            //判断是否包含非法字符
            java.util.Set<java.util.Map.Entry<String, String>> entries = KEYWORDS.entrySet();
            for (java.util.Map.Entry<String, String> entry : entries) {
                String keyword = entry.getValue();
                if (str.contains(keyword)) {
                    throw new IllegalArgumentException("parameter \"" + str + "\"contains illegal characters:\"" + keyword + "\", please use escape characters:\"" + ESCAPE_START_STR + entry.getKey() + ESCAPE_END_STR + "\"");
                }
            }
            return str;
        }

        private static boolean isBlank(String str) {
            int strLen;
            if (str == null || (strLen = str.length()) == 0) {
                return true;
            }
            for (int i = 0; i < strLen; i++) {
                if ((!Character.isWhitespace(str.charAt(i)))) {
                    return false;
                }
            }
            return true;
        }

        private static String escape(String str) {
            if (str == null || "".equals(str) || !str.contains(ESCAPE_START_STR) || !str.contains(ESCAPE_END_STR)) {
                return str;
            }
            java.util.Set<java.util.Map.Entry<String, String>> entries = KEYWORDS.entrySet();
            for (java.util.Map.Entry<String, String> entry : entries) {
                String esWord = entry.getKey();
                String realWord = entry.getValue();
                str = str.replace(ESCAPE_START_STR + esWord + ESCAPE_END_STR, realWord);
            }
            return str;
        }

        protected static void filter(java.util.Map<String, Object> params) {
            //校验url参数
            for (java.util.Map.Entry<String, Object> entry : params.entrySet()) {
                String expression = entry.getKey();
                String value = entry.getValue().toString();
                //防止sql注入
                // 防止SQL注入（因为sidx、order是通过拼接SQL实现排序的，会有SQL注入风险）
                filterSqlInject(expression);
                filterSqlInject(value);
            }
        }
    }
    /**
     * The column <code>test.t_test1.id</code>.
     */
    public final TableField<TTest1Record, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>test.t_test1.name</code>.
     */
    public final TableField<TTest1Record, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test.t_test1.date_time</code>.
     */
    public final TableField<TTest1Record, LocalDateTime> DATE_TIME = createField(DSL.name("date_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>test.t_test1.type</code>. test[start(1):开始,end(2):結束]
     */
    public final TableField<TTest1Record, Byte> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.TINYINT, this, "test[start(1):开始,end(2):結束]");

    /**
     * Create a <code>test.t_test1</code> table reference
     */
    public TTest1() {
        this(DSL.name("t_test1"), null);
    }

    /**
     * Create an aliased <code>test.t_test1</code> table reference
     */
    public TTest1(String alias) {
        this(DSL.name(alias), T_TEST1);
    }

    /**
     * Create an aliased <code>test.t_test1</code> table reference
     */
    public TTest1(Name alias) {
        this(alias, T_TEST1);
    }

    private TTest1(Name alias, Table<TTest1Record> aliased) {
        this(alias, aliased, null);
    }

    private TTest1(Name alias, Table<TTest1Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TTest1(Table<O> child, ForeignKey<O, TTest1Record> key) {
        super(child, key, T_TEST1);
    }

    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    @Override
    public UniqueKey<TTest1Record> getPrimaryKey() {
        return Keys.KEY_T_TEST1_PRIMARY;
    }

    @Override
    public List<UniqueKey<TTest1Record>> getKeys() {
        return Arrays.<UniqueKey<TTest1Record>>asList(Keys.KEY_T_TEST1_PRIMARY);
    }

    @Override
    public TTest1 as(String alias) {
        return new TTest1(DSL.name(alias), this);
    }

    @Override
    public TTest1 as(Name alias) {
        return new TTest1(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TTest1 rename(String name) {
        return new TTest1(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TTest1 rename(Name name) {
        return new TTest1(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDateTime, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
