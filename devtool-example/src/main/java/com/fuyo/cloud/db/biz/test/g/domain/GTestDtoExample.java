package com.fuyo.cloud.db.biz.test.g.domain;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class GTestDtoExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbg.generated
     */
    protected List<Object> joinCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbg.generated
     */
    protected String joinClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbg.generated
     */
    protected String groupByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbg.generated
     */
    protected Integer offset;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table test
     *
     * @mbg.generated
     */
    protected Integer rows;

    public int page = 1;

    public int pageSize = 10;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
        rows = null;
        offset = null;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample andCriteria(Object criteria) {
        if(this.joinCriteria == null){
            this.joinCriteria = new java.util.ArrayList<>();
        }
        this.joinCriteria.add(criteria);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public List<Object> getJoinCriteria() {
        return this.joinCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public String getJoinClause() {
        return joinClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample innerJoin(String table, String ... on) {
        StringBuffer sb = new StringBuffer();
        sb.append("INNER JOIN ");
        sb.append(table);
        sb.append(" ON ");
        for (int i = 0; i < on.length; i++) {
            sb.append(on[i]);
            if (i < on.length - 1) {
                sb.append(" AND ");
            }
        }
        this.joinClause = sb.toString();
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample leftJoin(String table, String ... on) {
        StringBuffer sb = new StringBuffer();
        sb.append("LEFT JOIN ");
        sb.append(table);
        sb.append(" ON ");
        for (int i = 0; i < on.length; i++) {
            sb.append(on[i]);
            if (i < on.length - 1) {
                sb.append(" AND ");
            }
        }
        this.joinClause = sb.toString();
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample rightJoin(String table, String ... on) {
        StringBuffer sb = new StringBuffer();
        sb.append("RIGHT JOIN ");
        sb.append(table);
        sb.append(" ON ");
        for (int i = 0; i < on.length; i++) {
            sb.append(on[i]);
            if (i < on.length - 1) {
                sb.append(" AND ");
            }
        }
        this.joinClause = sb.toString();
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public String getGroupByClause() {
        return groupByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample groupBy(String groupByClause) {
        this.groupByClause = groupByClause;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample groupBy(String ... groupByClause) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < groupByClause.length; i++) {
            sb.append(groupByClause[i]);
            if (i < groupByClause.length - 1) {
                sb.append(" , ");
            }
        }
        this.groupByClause = sb.toString();
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        GTestDtoExample example = new GTestDtoExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public void setOffset(Integer offset) {
        this.offset = offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public Integer getOffset() {
        return this.offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public void setRows(Integer rows) {
        this.rows = rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public Integer getRows() {
        return this.rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample limit(Integer rows) {
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample limit(Integer offset, Integer rows) {
        this.offset = offset;
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public GTestDtoExample page(Integer page, Integer pageSize) {
        this.offset = (page - 1) * pageSize;
        this.rows = pageSize;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public static Criteria build() {
        GTestDtoExample example = new GTestDtoExample();
        return example.createCriteria();
    }

    private void buildOrderExpression(List<String> orderMaps) {
        if (orderMaps == null || orderMaps.isEmpty()) {
            return;
        }
        int size = orderMaps.size();
        java.lang.String[] orderByCause = new String[size];
        for (int i = 0; i < size; i++) {
            java.lang.String expression  = orderMaps.get(i);
            if (expression.startsWith("od_") || expression.startsWith("oa_")) {
                String orderPrefix = expression.substring(1, 2);
                String propName = SQLFilter.escape(expression.substring(3));
                String columnName = parse(propName);
                if(columnName == null){
                   throw new java.lang.IllegalArgumentException("\"" + propName + "\" not exist");
                }
                switch (orderPrefix) {
                    case "a":
                        orderByCause[i] = columnName + " asc";
                        break;
                    case "d":
                        orderByCause[i] = columnName + " desc";
                        break;
                    default:
                        break;
                }
            }
        }
        this.orderBy(orderByCause);
    }

    private void buildWhereExpression(Criteria urlCriteria, String expression, Object value) {
        if (expression == null || "" == expression) {
            return;
        }

        String compPrefix = expression.substring(2, 4);
        String propName = SQLFilter.escape(expression.substring(5));
        String columnName = parse(propName);
        if(columnName == null){
            throw new java.lang.IllegalArgumentException("\"" + propName + "\" not exist");
        }
        switch (compPrefix) {
            case "eq":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " =", value, propName);
                }
                break;
            case "ne":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " <>", value, propName);
                }
                break;
            case "gt":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " >", value, propName);
                }
                break;
            case "ge":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " >=", value, propName);
                }
                break;
            case "lt":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " <", value, propName);
                }
                break;
            case "le":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " <=", value, propName);
                }
                break;
            case "lk":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " like", "%" + value + "%", propName);
                }
                break;
            case "in":
                if (value instanceof String) {
                    String v = (String) value;
                    if (v != null && !"".equals(v)) {
                        String[] split = v.split(",");
                        if (split != null && split.length > 0) {
                            ArrayList<String> strings = new ArrayList<>();
                            for (String s : split) {
                                strings.add(s);
                            }
                            urlCriteria.addCriterion(columnName + " in", strings, propName);
                        }
                    }
                }
                break;
            case "ep":
                urlCriteria.addCriterion(columnName + " =", "", propName);
                break;
            case "np":
                urlCriteria.addCriterion(columnName + " <>", "", propName);
                break;
            case "eu":
                urlCriteria.addCriterion(columnName + " is null");
                break;
            case "nu":
                urlCriteria.addCriterion(columnName + " is not null");
                break;
            default:
                break;
        }
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public final Criteria buildByUrlParams(java.util.Map<String, Object> params) {
         Criteria urlCriteria = this.createCriteria();
        if (params == null || params.isEmpty()) {
            return urlCriteria;
        }
        //校验url参数
        for (java.util.Map.Entry<String, Object> entry : params.entrySet()) {
            String expression = entry.getKey();
            String value = entry.getValue().toString();

            //防止sql注入
            // 防止SQL注入（因为sidx、order是通过拼接SQL实现排序的，会有SQL注入风险）
            SQLFilter.sqlInject(expression);
            SQLFilter.sqlInject(value);
        }

        //构建page参数
        for (java.util.Map.Entry<String, Object> entry : params.entrySet()) {
            String expression = entry.getKey();
            String value = entry.getValue().toString();
            String lowExp = expression.toLowerCase();
            //构建自身的参数
            if ("page".equals(lowExp)) {
                this.page = safeParse(value, 1);
                continue;
            } else if ("limit".equals(lowExp)) {
                this.pageSize = safeParse(value, 10);
                continue;
            }
        }
        //构建example的参数
        //检测所有参数,组建query
        java.util.Iterator entries = params.entrySet().iterator();
        java.util.List<String> orderExps = null;
        while (entries.hasNext()) {
            java.util.Map.Entry entry = (java.util.Map.Entry) entries.next();
            String expression = entry.getKey().toString();
            String value = entry.getValue().toString();
            //从默认的数据中构造 where 和 order
            if (java.util.regex.Pattern.matches("w[a-z]{3}_[a-zA-Z]+", expression)) {
                buildWhereExpression(urlCriteria, expression, value);
            } else if (java.util.regex.Pattern.matches("o[a-z]_[$_a-zA-Z]+", expression)) {
                if (orderExps == null) {
                    orderExps = new java.util.ArrayList<>();
                }
                orderExps.add(expression);
            }
        }
        if (orderExps != null) {
            buildOrderExpression(orderExps);
        }

        return urlCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table test
     *
     * @mbg.generated
     */
    public static Criteria buildWithUrlParam(java.util.Map<String, Object> params) {
        GTestDtoExample example = new GTestDtoExample();
        return example.buildByUrlParams(params);
    }

    private static String parse(String column) {
        if (column != null) {
            for (GTestDto.Column value : GTestDto.Column.values()) {
                if (column.equals(value.getJavaProperty())){
                    return value.getValue();
                }
            }
        }
        return null;
    }

    private static int safeParse(Object obj, int defaultInt) {
        if (obj == null) {
            return defaultInt;
        }
        return Integer.parseInt(obj.toString());
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table test
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria and(String ... sql) {
            String condition = "";
            for (String s : sql) {
                condition += s + " ";
            }
            addCriterion(condition);
            return (Criteria) this;
        }

        public Criteria andNotBetween(String exp, Object value1, Object value2) {
            addCriterion(exp + " not between" , value1, value2, exp );
            return (Criteria) this;
        }

        public Criteria andBetween(String exp, Object value1, Object value2) {
            addCriterion(exp + " between" , value1, value2, exp );
            return (Criteria) this;
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdEqualToColumn(GTestDto.Column column) {
            addCriterion("id = " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualToColumn(GTestDto.Column column) {
            addCriterion("id <> " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanColumn(GTestDto.Column column) {
            addCriterion("id > " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualToColumn(GTestDto.Column column) {
            addCriterion("id >= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanColumn(GTestDto.Column column) {
            addCriterion("id < " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualToColumn(GTestDto.Column column) {
            addCriterion("id <= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andNameIsNull() {
            addCriterion("`name` is null");
            return (Criteria) this;
        }

        public Criteria andNameIsNotNull() {
            addCriterion("`name` is not null");
            return (Criteria) this;
        }

        public Criteria andNameEqualTo(String value) {
            addCriterion("`name` =", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameEqualToColumn(GTestDto.Column column) {
            addCriterion("`name` = " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andNameNotEqualTo(String value) {
            addCriterion("`name` <>", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotEqualToColumn(GTestDto.Column column) {
            addCriterion("`name` <> " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andNameGreaterThan(String value) {
            addCriterion("`name` >", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanColumn(GTestDto.Column column) {
            addCriterion("`name` > " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanOrEqualTo(String value) {
            addCriterion("`name` >=", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanOrEqualToColumn(GTestDto.Column column) {
            addCriterion("`name` >= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andNameLessThan(String value) {
            addCriterion("`name` <", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLessThanColumn(GTestDto.Column column) {
            addCriterion("`name` < " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andNameLessThanOrEqualTo(String value) {
            addCriterion("`name` <=", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLessThanOrEqualToColumn(GTestDto.Column column) {
            addCriterion("`name` <= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andNameLike(String value) {
            addCriterion("`name` like", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotLike(String value) {
            addCriterion("`name` not like", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameIn(List<String> values) {
            addCriterion("`name` in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotIn(List<String> values) {
            addCriterion("`name` not in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameBetween(String value1, String value2) {
            addCriterion("`name` between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotBetween(String value1, String value2) {
            addCriterion("`name` not between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeIsNull() {
            addCriterion("created_time is null");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeIsNotNull() {
            addCriterion("created_time is not null");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeEqualTo(LocalDateTime value) {
            addCriterion("created_time =", value, "createdTime");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeEqualToColumn(GTestDto.Column column) {
            addCriterion("created_time = " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andCreatedTimeNotEqualTo(LocalDateTime value) {
            addCriterion("created_time <>", value, "createdTime");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeNotEqualToColumn(GTestDto.Column column) {
            addCriterion("created_time <> " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andCreatedTimeGreaterThan(LocalDateTime value) {
            addCriterion("created_time >", value, "createdTime");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeGreaterThanColumn(GTestDto.Column column) {
            addCriterion("created_time > " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andCreatedTimeGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("created_time >=", value, "createdTime");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeGreaterThanOrEqualToColumn(GTestDto.Column column) {
            addCriterion("created_time >= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andCreatedTimeLessThan(LocalDateTime value) {
            addCriterion("created_time <", value, "createdTime");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeLessThanColumn(GTestDto.Column column) {
            addCriterion("created_time < " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andCreatedTimeLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("created_time <=", value, "createdTime");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeLessThanOrEqualToColumn(GTestDto.Column column) {
            addCriterion("created_time <= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andCreatedTimeIn(List<LocalDateTime> values) {
            addCriterion("created_time in", values, "createdTime");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeNotIn(List<LocalDateTime> values) {
            addCriterion("created_time not in", values, "createdTime");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("created_time between", value1, value2, "createdTime");
            return (Criteria) this;
        }

        public Criteria andCreatedTimeNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("created_time not between", value1, value2, "createdTime");
            return (Criteria) this;
        }

        public Criteria andTypeIsNull() {
            addCriterion("`type` is null");
            return (Criteria) this;
        }

        public Criteria andTypeIsNotNull() {
            addCriterion("`type` is not null");
            return (Criteria) this;
        }

        public Criteria andTypeEqualTo(Boolean value) {
            addCriterion("`type` =", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeEqualToColumn(GTestDto.Column column) {
            addCriterion("`type` = " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeNotEqualTo(Boolean value) {
            addCriterion("`type` <>", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeNotEqualToColumn(GTestDto.Column column) {
            addCriterion("`type` <> " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeGreaterThan(Boolean value) {
            addCriterion("`type` >", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeGreaterThanColumn(GTestDto.Column column) {
            addCriterion("`type` > " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeGreaterThanOrEqualTo(Boolean value) {
            addCriterion("`type` >=", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeGreaterThanOrEqualToColumn(GTestDto.Column column) {
            addCriterion("`type` >= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeLessThan(Boolean value) {
            addCriterion("`type` <", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeLessThanColumn(GTestDto.Column column) {
            addCriterion("`type` < " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeLessThanOrEqualTo(Boolean value) {
            addCriterion("`type` <=", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeLessThanOrEqualToColumn(GTestDto.Column column) {
            addCriterion("`type` <= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeIn(List<Boolean> values) {
            addCriterion("`type` in", values, "type");
            return (Criteria) this;
        }

        public Criteria andTypeNotIn(List<Boolean> values) {
            addCriterion("`type` not in", values, "type");
            return (Criteria) this;
        }

        public Criteria andTypeBetween(Boolean value1, Boolean value2) {
            addCriterion("`type` between", value1, value2, "type");
            return (Criteria) this;
        }

        public Criteria andTypeNotBetween(Boolean value1, Boolean value2) {
            addCriterion("`type` not between", value1, value2, "type");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table test
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table test
         *
         * @mbg.generated
         */
        private GTestDtoExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table test
         *
         * @mbg.generated
         */
        protected Criteria(GTestDtoExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table test
         *
         * @mbg.generated
         */
        public GTestDtoExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table test
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table test
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table test
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table test
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table test
         *
         * @mbg.generated
         */
        void example(com.fuyo.cloud.db.biz.test.g.domain.GTestDtoExample example);
    }

    static class SQLFilter {
        public static final String ESCAPE_START_STR = "$";

        public static final String ESCAPE_END_STR = "_";

        public static final java.util.Map<String, String> KEYWORDS;

        static {
            KEYWORDS = new java.util.HashMap<String, String>() {{
            put("mastor", "master");
            put("clr", "truncate");
            put("ins", "insert");
            put("sel", "select");
            put("del", "delete");
            put("upt", "update");
            put("def", "declare");
            put("alt", "alert");
            put("dpt", "drop");
        }};
        }

        protected static String sqlInject(String str) {
            if (isBlank(str)) {
            return null;
        }
        //去掉'|"|;|\字符
        str = str.replace("'", "");
        str = str.replace("\"", "");
        str = str.replace(";", "");
        str = str.replace("\\", "");
        //转换成小写
        str = str.toLowerCase();
        //判断是否包含非法字符
        java.util.Set<java.util.Map.Entry<String, String>> entries = KEYWORDS.entrySet();
        for (java.util.Map.Entry<String, String> entry : entries) {
            String keyword = entry.getValue();
            if (str.contains(keyword)) {
                throw new IllegalArgumentException("parameter \"" + str + "\"contains illegal characters:\"" + keyword + "\", please use escape characters:\"" + ESCAPE_START_STR + entry.getKey() + ESCAPE_END_STR + "\"");
            }
        }

        return str;
        }

        private static boolean isBlank(String str) {
            int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if ((!Character.isWhitespace(str.charAt(i)))) {
                return false;
            }
        }
        return true;
        }

        private static String escape(String str) {
            if (str == null || "".equals(str) || !str.contains(ESCAPE_START_STR) || !str.contains(ESCAPE_END_STR)) {
            return str;
        }
        java.util.Set<java.util.Map.Entry<String, String>> entries = KEYWORDS.entrySet();
        for (java.util.Map.Entry<String, String> entry : entries) {
            String esWord = entry.getKey();
            String realWord = entry.getValue();
            str = str.replace(ESCAPE_START_STR + esWord + ESCAPE_END_STR, realWord);
        }
        return str;
        }
    }
}